name: aws-publish                     # Workflow 이름
on:
  push:                               # master Branch에서 push 이벤트가 일어났을 때만 실행
    branches:
      - release                       # Event 감지

jobs:                                 # Job 설정
  build:                              # Job ID
    name: s3-deploy                     # Job 이름
    runs-on: ubuntu-18.04             # Job 가상환경 인스턴스

    steps:                            # Steps
      - name: checkout source code    # Step 이름
        uses: actions/checkout@master # Uses를 통한 외부 설정 가져오기: 자신의 레포지토리 소스 받아오기
        
      - name: Cache node modules # node modules 캐싱
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
#       - run: npm install --global workbox-cli
            
      - name: Install Dependencies # 의존 파일 설치
        working-directory: ./app
        run: npm install

      - name: Build # React Build
        working-directory: ./app
        env:
          REACT_APP_API_KEY: ${{ secrets.API_KEY }}
          REACT_APP_AUTH_DOMAIN: ${{ secrets.AUTH_DOMAIN }}
          REACT_APP_DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REACT_APP_PROJECT_ID: ${{ secrets.PROJECT_ID }}
          REACT_APP_STORAGE_BUCKET: ${{ secrets.STORAGE_BUCKET }}
          REACT_APP_MESSENGING_SENDER_ID: ${{ secrets.MESSENGING_SENDER_ID }}
          REACT_APP_APP_ID: ${{ secrets.APP_ID }}
          REACT_APP_MEASUREMENT_ID: ${{ secrets.MEASUREMENT_ID }}
        run: npm run build
      
      - name: Workbox-config
        working-directory: ./app
        run: |
          npm install workbox-cli
          workbox generateSW workbox-config.js

      - name: Deploy # S3에 배포하기
        working-directory: ./app
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
            --recursive \
            --region ${{ secrets.S3_REGION }} \
            build s3://${{ secrets.S3_BUCKET_NAME }}

      - name: Create invalidation in CloudFront
        uses: chetan/invalidate-cloudfront-action@master
        env:
          DISTRIBUTION: ${{ secrets.CF_DISTRIBUTION_ID }}
          PATHS: '/*'
          AWS_REGION: ${{ secrets.S3_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
